module(name = "bazel-test")

bazel_dep(name = "platforms", version = "0.0.6") # Without this we get weird toolchain errors on windows
bazel_dep(name = "aspect_rules_swc", version = "0.21.3")
bazel_dep(name = "aspect_rules_js", version = "1.16.0")
bazel_dep(name = "aspect_rules_ts", version = "1.2.0")
bazel_dep(name = "rules_nodejs", version = "5.5.3")
bazel_dep(name = "bazel_skylib", version = "1.4.0")

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)

# This translates the pnpm lock file into a series of bazel files
# that bazel can process for dependencies instead of relying on
# pnpm directly.

# To see those files, you can run:
# `bazel query "@npm//:*" --output location`
# Which will show the aliases generated and the location of the generated files
# so you can read them locally
npm.npm_translate_lock(
    name = "npm",
    pnpm_lock = "//:pnpm-lock.yaml"
)

use_repo(npm, "npm")


rules_ts_ext = use_extension(
    "@aspect_rules_ts//ts:extensions.bzl",
    "ext",
    dev_dependency = True,
)

rules_ts_ext.deps()

use_repo(rules_ts_ext, "npm_typescript")

# Currently there's a bug in 0.14.0 of aspect_rules_esbuild
# esbuild = use_extension("@aspect_rules_esbuild//esbuild:extensions.bzl", "esbuild")
# esbuild.toolchain(name = "esbuild", esbuild_version = "0.16.7")
# use_repo(esbuild, "esbuild_toolchains")

# register_toolchains("@esbuild_toolchains//:all")
